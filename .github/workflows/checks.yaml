name: checks
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DUMMY_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DUMMY_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-2
      AWS_DEFAULT_OUTPUT: text
      DISEASE_NORM_DB_URL: ${{ matrix.db_url }}
      DISEASE_NORM_TEST: true
    strategy:
      matrix:
        db_url: ["http://localhost:8002", "postgres://postgres:postgres@localhost:5432/disease_normalizer_test"]
        python-version: ["3.11", "3.12", "3.13"]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_DB: 'disease_normalizer_test'
          POSTGRES_PASSWORD: 'postgres'
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Build local DynamoDB
      if: ${{ env.DISEASE_NORM_DB_URL == 'http://localhost:8002' }}
      run: |
        chmod +x ./tests/scripts/dynamodb_run.sh
        ./tests/scripts/dynamodb_run.sh

    - name: Install DynamoDB dependencies
      if: ${{ env.DISEASE_NORM_DB_URL == 'http://localhost:8002' }}
      run: uv sync --extra etl --extra tests

    - name: Install PG dependencies
      if: ${{ env.DISEASE_NORM_DB_URL != 'http://localhost:8002' }}
      run: uv sync --extra etl --extra tests --extra pg

    - name: Run tests
      run: uv run pytest tests/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Check style
      run: uv run ruff check . && uv run ruff format --check .

  precommit_hooks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - id: precommit_tw
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: end-of-file-fixer --all-files
        continue-on-error: true

      - id: precommit_mle
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: trailing-whitespace --all-files
        continue-on-error: true

      - id: precommit_eof
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: mixed-line-ending --all-files
        continue-on-error: true

      - name: Check precommit failures
        if: ${{ always () }}
        run: |
          failed=0
          for s in precommit_tw precommit_mle precommit_eof; do
            if [ "${{ steps[s].outcome }}" = "failure" ]; then
              echo "::error title=${s}::${s} failed"
              failed=1
            fi
          done
          exit $failed
        shell: bash

  docs:
    runs-on: ubuntu-latest
    env:
      SPHINX_GITHUB_CHANGELOG_TOKEN: ${{ secrets.SPHINX_GITHUB_CHANGELOG_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --extra docs --extra etl --extra pg

      - name: Attempt docs build
        working-directory: ./docs
        run: source ../.venv/bin/activate && make html
